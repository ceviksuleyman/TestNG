@Test
    public void test() {
    JavascriptExecutor jse = (JavascriptExecutor) driver;
        //jse.executeScript("arguments[0].scrollIntoView(true);", auto.downloadInvoiceButton);
        try {
            driver.findElement(By.linkText("Scans")).click();
        } catch (Exception e) {
            JavascriptExecutor executor = (JavascriptExecutor) driver;
            executor.executeScript("arguments[0].click();", driver.findElement(By.linkText("Scans")));
        }
    }

    TestNG de
    1- Öncelikle configuration ’a tanimlamalar yapılır(username,url,password gibi)
    2- Pages sayfasinda locate’leri yapariz
    3- ConfigReader ile sorunun çözümünü yapilir (edited)

   POM'de Driver icin TestBase class'ina extends etmek yerine
   Driver class'indan static method'lar kullanarak driver olusturup,
   ilgili ayarlarin yapilmasi ve en sonda driver'in kapatilmasi tercih edilmistir.
   POM'de Driver class'indaki getDriver()'nin obje olusturularak kullanilmasini engellemek icin
   Singleton pattern kullanimi benimsenmistir.

   Singleton Pattern -> tekli kullanim, bir class'in farkli class'lardan
   obje olusturularak kullanimini engellemek icin kullanilir.
   Bunu saglamak icin yapmamiz gereken sey oldukca basit
   obje olusturmak icin kullanilan constructor'i private yaptiginizda
   baska class'larda Driver class'indan obje olusturulmasi mumkun OLAMAZ

   POM'da artik inheritance yerine object ve static kullanarak methodlara ulasiyoruz
   page classina objeyle driver classina static ile ulasiriz


